{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-green",
    "glyph" : "magic"
  },
  "name" : "Northeastern Gym Availability",
  "script" : "\/\/ Constants\nconst BAR_EMPTY_COLOR = Color.dynamic(Color.lightGray(), Color.darkGray())\nconst PROGRESS_BAR_WIDTH = 200\nconst PROGRESS_BAR_HEIGHT = 2\n\n\n\/\/ Code runs here\nconst widget = await createWidget()\n\nif (config.runsInWidget) {\n  Script.setWidget(widget)\n  Script.complete()\n}\nelse {\n  widget.presentLarge()\n}\n\nScript.complete()\n\nasync function fetchApi() {\n  const req = new Request('https:\/\/connect2concepts.com\/connect2\/?type=circle&key=2A2BE0D8-DF10-4A48-BEDD-B3BC0CD628E7')\n  return req.loadString()\n}\n\nasync function getGymLevels() {\n  const htmlFromAPI = await fetchApi()\n  const splitString = htmlFromAPI.split('\\n').slice(11)\n  const trimmedArr = splitString.map(el => el.trim())\n  const arrNoEmpty = trimmedArr.filter(el => el !== \"\")\n  const centerDivs = trimmedArr.filter(el => el.includes(\"data-percent\") || el.includes(\"text-align:center\"))\n  centerDivs.unshift('<div>')\n  centerDivs.push('<\/div>')\n  const body = centerDivs.join('').split('<br\/>').join(' ').split(\"&\").join('')\n  const parser = new XMLParser(body)\n  const gymLevels = {}\n  let name = ''\n  let percent = 0\n  let lastCount = 0\n  let lastUpdate = ''\n  parser.didStartElement = (el, attrs) => {\n    if ('data-percent' in attrs) {\n      percent = parseFloat(attrs['data-percent'])\n    }\n\t}\n  parser.foundCharacters = (string) => {\n    if (string.includes('Marino') || string.includes('SquashBusters')) {\n      name = string\n    }\n    if (string.includes('Last Count')) {\n      const splitStrings = string.split(' ')\n      lastCount = parseInt(splitStrings[3])\n      lastUpdate = splitStrings[5] + ' ' + splitStrings[6] + ' ' + splitStrings[7]\n      gymLevels[name.trim()] = {\n        percent,\n        lastCount,\n        lastUpdate\n      }\n    }\n\t}\n  parser.parseErrorOccurred = () => {\n  console.log(\"error\")\n\t}\n  parser.parse()\n  return gymLevels\n}\n\nasync function createWidget() {\n  const rawGymLevels = await getGymLevels()\n  const gymLevels = await cleanGymLevels(rawGymLevels)\n  const listWidget = new ListWidget()\n  const heading = listWidget.addText(\"Gym Availability\")\n  const levels = listWidget.addStack()\n  heading.centerAlignText()\n  listWidget.addSpacer()\n  for (const [location, data] of Object.entries(gymLevels)) {\n    const stack = listWidget.addStack()\n    stack.layoutVertically()\n    stack.addText(location)\n    const progressStack = stack.addStack()\n    progressStack.layoutHorizontally()\n    progressStack.centerAlignContent()\n    progressStack.addImage(await drawProgressBar(await selectColor(data.percent), data.percent))\n    progressStack.addSpacer()\n    progressStack.addText(Math.round(data.percent).toString() + \"%\")\n  }\n\n  listWidget.addSpacer()\n  listWidget.addText(gymLevels[\"SquashBusters - 4th Floor\"].lastUpdate).centerAlignText()\n  \n  return listWidget\n  \n}\n\nasync function drawProgressBar(barColor, percent) {\n  const context = new DrawContext()\n  context.size = new Size(PROGRESS_BAR_WIDTH, PROGRESS_BAR_HEIGHT)\n  context.opaque = false\n  context.respectScreenScale = true\n  \n  const emptyBar = new Path()\n  emptyBar.addRoundedRect(new Rect(0, 0, PROGRESS_BAR_WIDTH, PROGRESS_BAR_HEIGHT), 0, 0)\n  context.addPath(emptyBar)\n  context.setFillColor(BAR_EMPTY_COLOR)\n  context.fillPath()\n  \n  const path1 = new Path()\n  path1.addRoundedRect(new Rect(0, 0, PROGRESS_BAR_WIDTH * (percent \/ 100), PROGRESS_BAR_HEIGHT), 0, 0)\n  context.addPath(path1)\n  context.setFillColor(barColor)\n  context.fillPath()\n  \n  \n  return context.getImage()\n}\n\nasync function cleanGymLevels(gymLevels) {\n  for (const [key, value] of Object.entries(gymLevels)) {\n    if (key === 'Marino Center - 3rd Floor Weight Room') {\n      gymLevels['Marino - Weight Room'] = value\n      delete gymLevels['Marino Center - 3rd Floor Weight Room']\n    }\n    else if (key === 'Marino Center - 3rd Floor Select  Cardio') {\n      gymLevels['Marino - 3rd Floor Machines'] = value\n      delete gymLevels['Marino Center - 3rd Floor Select  Cardio']\n    }\n    else if (key.includes('Marino Center')) {\n      const [marino, level] = key.split(' - ')\n      gymLevels[`Marino - ${level}`] = value\n      delete gymLevels[key]\n    }\n  }\n  \n  return gymLevels\n}\n\nasync function selectColor(percent) {\n  if (percent < 30) {\n    return Color.green()\n  }\n  else if (percent < 50) {\n    return Color.yellow()\n  }\n  else if (percent < 65) {\n    return Color.orange()\n  }\n  else {\n    return Color.red()\n  }\n}\n",
  "share_sheet_inputs" : [

  ]
}