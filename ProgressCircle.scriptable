{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "magic"
  },
  "name" : "ProgressCircle",
  "script" : "\/*\n* progressCircle(on: Stack or Widget, value: number, colour: string, background: string, size: number, barWidth: number) : Promise<Stack>\n*\n* PARAMS\n* on - the stack or widget to add the progress circle to\n* value - a number between 1 and 100 to be the circle percentage or a number between 0 and 1 to be the circle percentage\n* colour - a HTML supported (hex, rgb, hsl) colour for the progress of the circle. Alternitively, it can be two HTML supported colours seperated by a hyphen (white-black) for the first colour to be active on light mode and second on dark mode\n* background - a HTML supported (hex, rgb, hsl) colour for the unfilled progress of the circle. Alternitively, it can be two HTML supported colours seperated by a hyphen (white-black) for the first colour to be active on light mode and second on dark mode\n* size - the size of the progress circle\n* barWidth - the width of the circular progress bar\n*\n* RETURNS\n* A stack with the background image set to the progress circle and with set padding.\n*\/\nmodule.exports.progressCircle = progressCircle\nScript.complete()\n\n\nasync function progressCircle(\n  on,\n  value = 50,\n  colour = \"hsl(0, 0%, 100%)\",\n  background = \"hsl(0, 0%, 10%)\",\n  size = 56,\n  barWidth = 5.5\n) {\n  if (value > 1) {\n    value \/= 100\n  }\n  if (value < 0) {\n    value = 0\n  }\n  if (value > 1) {\n    value = 1\n  }\n\n  async function isUsingDarkAppearance() {\n    return !Color.dynamic(Color.white(), Color.black()).red\n  }\n  let isDark = await isUsingDarkAppearance()\n\n  if (colour.split(\"-\").length > 1) {\n    if (isDark) {\n      colour = colour.split(\"-\")[1]\n    } else {\n      colour = colour.split(\"-\")[0]\n    }\n  }\n\n  if (background.split(\"-\").length > 1) {\n    if (isDark) {\n      background = background.split(\"-\")[1]\n    } else {\n      background = background.split(\"-\")[0]\n    }\n  }\n\n  let w = new WebView()\n  await w.loadHTML('<canvas id=\"c\"><\/canvas>')\n\n  let base64 = await w.evaluateJavaScript(\n    `\n  let colour = \"${colour}\",\n    background = \"${background}\",\n    size = ${size}*3,\n    lineWidth = ${barWidth}*3,\n    percent = ${value * 100}\n      \n  let canvas = document.getElementById('c'),\n    c = canvas.getContext('2d')\n  canvas.width = size\n  canvas.height = size\n  let posX = canvas.width \/ 2,\n    posY = canvas.height \/ 2,\n    onePercent = 360 \/ 100,\n    result = onePercent * percent\n  c.lineCap = 'round'\n  c.beginPath()\n  c.arc( posX, posY, (size-lineWidth-1)\/2, (Math.PI\/180) * 270, (Math.PI\/180) * (270 + 360) )\n  c.strokeStyle = background\n  c.lineWidth = lineWidth \n  c.stroke()\n  c.beginPath()\n  c.strokeStyle = colour\n  c.lineWidth = lineWidth\n  c.arc( posX, posY, (size-lineWidth-1)\/2, (Math.PI\/180) * 270, (Math.PI\/180) * (270 + result) )\n  c.stroke()\n  completion(canvas.toDataURL().replace(\"data:image\/png;base64,\",\"\"))`,\n    true\n  )\n  const image = Image.fromData(Data.fromBase64String(base64))\n  \n  let stack = on.addStack()\n  stack.size = new Size(size, size)\n  stack.backgroundImage = image\n  stack.centerAlignContent()\n  let padding = barWidth * 2\n  stack.setPadding(padding, padding, padding, padding)\n\n  return stack\n}",
  "share_sheet_inputs" : [

  ]
}